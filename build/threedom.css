/*!
 * Copyright (c) 2020 Darren Scott - All Rights Reserved
 *
 * This program is distributed under GPL Version 3 in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY.
 */
.three-d {
  --x-rotation: var(--rotate-x, 0);
  --y-rotation: var(--rotate-y, 0);
  --z-rotation: var(--rotate-z, 0);
  --x-translation: var(--translate-x, 0);
  --y-translation: var(--translate-y, 0);
  --z-translation: var(--translate-z, 0);
}
.three-d > *:not(.three-d) {
  --x-rotation: 0;
  --y-rotation: 0;
  --z-rotation: 0;
  --x-translation: 0;
  --y-translation: 0;
  --z-translation: 0;
}
.three-d, .three-d > *:not(.three-d) {
  --angle: 0;
  --x2-rotation: 0;
  --y2-rotation: 0;
  --z2-rotation: 0;
  --x2-translation: 0;
  --y2-translation: 0;
  --z2-translation: 0;
  /*
    Many thanks to the author of this gist for the trig functions:
    https://gist.github.com/stereokai/7666bfe93929b14c2dced148c79e0e97
  */
  --rad: calc(var(--angle) * 3.1415926536 / 180);
  --pow2: calc(var(--rad) * var(--rad));
  --pow3: calc(var(--pow2) * var(--rad));
  --pow4: calc(var(--pow3) * var(--rad));
  --pow5: calc(var(--pow4) * var(--rad));
  --pow6: calc(var(--pow5) * var(--rad));
  --pow7: calc(var(--pow6) * var(--rad));
  --pow8: calc(var(--pow7) * var(--rad));
  --pow9: calc(var(--pow8) * var(--rad));
  --cos-term1: 1;
  --cos-term2: calc(var(--pow2) / 2);
  --cos-term3: calc(var(--pow4) / 24);
  --cos-term4: calc(var(--pow6) / 720);
  --cos-term5: calc(var(--pow8) / 40320);
  --sin-term1: var(--rad);
  --sin-term2: calc(var(--pow3) / 6);
  --sin-term3: calc(var(--pow5) / 120);
  --sin-term4: calc(var(--pow7) / 5040);
  --sin-term5: calc(var(--pow9) / 362880);
  --cos: calc(var(--cos-term1) - var(--cos-term2) + var(--cos-term3) - var(--cos-term4) + var(--cos-term5));
  --sin: calc(var(--sin-term1) - var(--sin-term2) + var(--sin-term3) - var(--sin-term4) + var(--sin-term5));
  --tan: calc(var(--sin) / var(--cos));
}

.three-d {
  /*
    All 3D classes get their width and height from the --width and
    --height CSS variables.
  */
  width: var(--width);
  height: var(--height);
}
.three-d > *:not(.three-d) {
  /*
    Direct descendants which are not 3D objects inherit the --width
    and --height CSS variable values from their parent
  */
  --width: inherit;
  --height: inherit;
  --depth: inherit;
}
.three-d, .three-d > * {
  /*
    Both 3D classes and their direct descendants (faces) use flex
    display so that their children are centered both vertically and
    horizontally by default.
  */
  display: flex;
  align-items: center;
  justify-content: center;
}
.three-d:not(.space) > * {
  /*
    All faces are absolutely positioned relative to their parent.
  */
  position: absolute;
  width: inherit;
  height: inherit;
}
.three-d, .three-d:not(.space) > * {
  /*
    Applies the transforms to position the faces to create the shapes.

  */
  transform: rotateX(var(--x-rotation)) rotateY(var(--y-rotation)) rotateZ(var(--z-rotation)) translate3d(var(--x2-translation), var(--y2-translation), var(--z2-translation)) rotateX(var(--x2-rotation)) rotateY(var(--y2-rotation)) rotateZ(var(--z2-rotation)) translate3d(var(--x-translation), var(--y-translation), var(--z-translation));
}
.three-d.space {
  /*
   The space class triggers the 3D perspective.
  */
  perspective: 200vmax;
}
.three-d.space * {
  /*
    All descendants of a space require preserve-3d so that they all
    exist within a single 3D space.
  */
  transform-style: preserve-3d;
}
.three-d.space.inline {
  /*
    An inline space can be displayed as an inline element.
  */
  display: inline-flex;
  vertical-align: middle;
}
.three-d.space.private {
  /*
    A private space has it's content clipped so that objects inside
    of it don't overflow into the space around it.
  */
  overflow: hidden;
}
.three-d.space.reflective {
  /*
    A reflective space has a reflection underneath it. Note that this
    feature currently only supports Webkit browsers.
  */
  -webkit-box-reflect: below 0 var(--reflection);
}
.three-d.object {
  /*

    Currently, only 2 faces (a card), 4 faces (a tetrahedron), and 6 faces
    (a cuboid) are supported. Hopefully more will be added soon.
  */
  /*
    top, right, bottom, left is the css standard
    so for planes, I recommend front, top, right, back, bottom, left

    BUT, IF I MAKE IT top, front, right, back, left, bottom
    then it's all a little easier (shorter), no?
  */
}
.three-d.object > *:nth-child(2):nth-last-child(1) {
  /*
    This is a 2-faced object, with each face on the same plane facing
    away from each other, like a piece of paper.
  */
  --y-rotation: 180deg;
}
.three-d.object > *:first-child:nth-last-child(4), .three-d.object > *:first-child:nth-last-child(4) ~ * {
  --angle: 60;
  /* only regular tetrahedrons are supported currently */
  --height: var(--width) !important;
  --depth: var(--width) !important;
  --face-height: calc(var(--height) * var(--sin));
  height: var(--face-height);
  clip-path: polygon(50% 0, 0 100%, 100% 100%);
  transform-origin: 0 0;
}
.three-d.object > *:nth-child(1):nth-last-child(4) {
  /* The 1st face */
  --x-rotation: 19.5deg;
}
.three-d.object > *:nth-child(2):nth-last-child(3) {
  /* The 2nd face */
  transform-origin: 50% 0;
  --x2-rotation: 19.5deg;
  --y-rotation: 120deg;
}
.three-d.object > *:nth-child(3):nth-last-child(2) {
  /* The 3rd face */
  transform-origin: 50% 0;
  --x2-rotation: 19.5deg;
  --y-rotation: -120deg;
}
.three-d.object > *:nth-child(4):nth-last-child(1) {
  /* The 4th face */
  --z-translation: calc(0px - var(--face-height) * 0.9426414911);
  --y-translation: calc(0px - 2 * var(--face-height) * 0.3338068592);
  --x-rotation: 90deg;
}
.three-d.object > *:nth-child(1):nth-last-child(6) {
  /* The 1st face */
  --z-translation: calc(var(--depth) / 2);
}
.three-d.object > *:nth-child(2):nth-last-child(5) {
  /* The 2nd face */
  height: var(--depth);
  --z-translation: calc(var(--height) / 2);
  --x-rotation: 90deg;
}
.three-d.object > *:nth-child(3):nth-last-child(4) {
  /* The 3rd face */
  width: var(--depth);
  --z-translation: calc(var(--width) / 2);
  --y-rotation: 90deg;
}
.three-d.object > *:nth-child(4):nth-last-child(3) {
  /* The 4th face */
  --z-translation: calc(var(--depth) / 2);
  --y-rotation: 180deg;
}
.three-d.object > *:nth-child(5):nth-last-child(2) {
  /* The 5th face */
  height: var(--depth);
  --z-translation: calc(var(--height) / 2);
  --x-rotation: 270deg;
}
.three-d.object > *:nth-child(6):nth-last-child(1) {
  /* The 6th face */
  width: var(--depth);
  --z-translation: calc(var(--width) / 2);
  --y-rotation: 270deg;
}
.three-d.cylinder {
  /*
    A Cylinder has a top (the 1st) and a bottom (the last) face, plus up
    to 16 side faces.
  */
}
.three-d.cylinder > * {
  /* Sorry, not supporting a non-square depth until CSS has sine/cosine funcs */
  --depth: var(--width) !important;
  --angle: calc(360 / (var(--faces) - 2) / 2);
  --face-width: calc(var(--sin) * var(--width));
  --radius: calc((var(--face-width) / 2) / var(--tan));
}
.three-d.cylinder > *:first-child {
  /*
    This is the top face, which just needs to be clipped according to
    the number of side faces, rotated to 90 degress and moved to the
    top of the cylinder.
  */
  height: var(--depth);
  clip-path: var(--cylinder-top);
  --z-translation: calc(var(--height) / 2);
  --x-rotation: 90deg;
}
.three-d.cylinder > *:not(:first-child):not(:last-child) {
  /*
    The side faces of the cylinder. Each needs to be rotated to an
    angle dependent on the total number of sides, and set to the
    appropriate width so that the circumference of the cylinder
    is correct to sit within the configured width/depth.
  */
  width: var(--face-width);
  --face-angle: calc(1deg * (var(--angle) * 2));
  --y2-rotation: calc(var(--face-angle) * (var(--face) - 2));
  --z-translation: var(--radius);
}
.three-d.cylinder > *:last-child {
  /*
    The bottom face of the cylinder, which needs to treated similarly
    to the top, except the clip path *may* need to be inverted because
    this face is rotated by 270deg rather than 90deg so it faces outward.
  */
  height: var(--depth);
  clip-path: var(--cylinder-bottom, var(--cylinder-top));
  --z-translation: calc(var(--height) / 2);
  --x-rotation: 270deg;
}
.three-d.carousel {
  /*
    A Carousel is similar to a cylinder except it has no top or bottom
    face, so it is more like a tube than a cylinder.
  */
}
.three-d.carousel > * {
  width: var(--face-width);
  --angle: calc(360 / var(--faces) / 2);
  --radius: calc((var(--face-width) / 2) / var(--tan));
  --face-angle: calc(1deg * (var(--angle) * 2));
  --face-width: calc(var(--sin) * var(--width));
  --y2-rotation: calc(var(--face-angle) * (var(--face) - 1));
  --z-translation: var(--radius);
}
.three-d.carousel.wrapped > * {
  /*
    If a carousel has a wrapped modifier class, it's faces are given
    a background-position such that any background image wraps around
    the carousel.
  */
  background-size: cover;
  background-position-x: calc(var(--face-width) * (1 - var(--face)));
}
.three-d.wheel {
  /*
    A wheel is an up-ended carousel, so the faces revolve around the x-axis
    rather than the y-axis.
  */
}
.three-d.wheel > * {
  height: var(--face-height);
  --angle: calc(360 / var(--faces) / 2);
  --radius: calc((var(--face-height) / 2) / var(--tan));
  --face-angle: calc(1deg * (var(--angle) * 2));
  --face-height: calc(var(--sin) * var(--height));
  --x-rotation: calc(var(--face-angle) * (var(--face) - 1));
  --z-translation: var(--radius);
}
.three-d.wheel.wrapped > * {
  /*
    If a wheel has a wrapped modifier class, it's faces are given
    a background-position such that any background image wraps around
    the wheel.
  */
  background-size: cover;
  background-position-y: calc(var(--face-height) * (1 - var(--face)));
}
.three-d.rotating {
  --rx: 1;
  --ry: 1;
  --rz: 1;
  --from: 0deg;
  --to: 360deg;
  animation: rotating 10s linear infinite;
}
.three-d.spinning {
  --rx: 0;
  --rz: 0;
  --from: 360deg;
  --to: 0deg;
  animation: rotating 10s linear infinite;
}
.three-d.rolling {
  --ry: 0;
  --rz: 0;
  --from: 360deg;
  --to: 0deg;
  animation: rotating 10s linear infinite;
}
.three-d.extra.slowly {
  animation-duration: 60s;
}
.three-d.slowly {
  animation-duration: 30s;
}
.three-d.quickly {
  animation-duration: 5s;
}
.three-d.extra.quickly {
  animation-duration: 2s;
}
.three-d.no-backface > * {
  /*
    A shortcut class to hide the back faces.
  */
  backface-visibility: hidden;
}
.three-d.shaded.object > * {
  /*
    The shaded class implements some very rudimentory shading. This
    only works for objects which do not move, and currently only 6
    sided shapes are supported (i.e cuboids).
  */
  filter: brightness(var(--brightness, 1));
}
.three-d.shaded.object > *:nth-child(2) {
  --brightness: 1.2;
  /* top */
}
.three-d.shaded.object > *:nth-child(3) {
  --brightness: 0.9;
  /* right */
}
.three-d.shaded.object > *:nth-child(4) {
  --brightness: 0.8;
  /* back */
}
.three-d.shaded.object > *:nth-child(5) {
  --brightness: 1.1;
  /* left */
}
.three-d.shaded.object > *:nth-child(6) {
  --brightness: 0.8;
  /* bottom */
}
.three-d.seated.object {
  /*
    A seated object is one that is sitting on the ground, so the bottom
    face has a box shadow, which helps create the effect visually.

    This currently works okay for cuboids, but may not work for other
    shapes.
  */
}
.three-d.seated.object > *:last-child {
  box-shadow: -7px -7px 20px 0px #000000b5;
}

.three-d > * {
  --face: 0;
  --faces: 0;
}
.three-d > *:nth-child(1) {
  --face: 1;
}
.three-d > *:first-child:nth-last-child(1), .three-d > *:first-child:nth-last-child(1) ~ * {
  --faces: 1;
}
.three-d > *:nth-child(2) {
  --face: 2;
}
.three-d > *:first-child:nth-last-child(2), .three-d > *:first-child:nth-last-child(2) ~ * {
  --faces: 2;
}
.three-d > *:nth-child(3) {
  --face: 3;
}
.three-d > *:first-child:nth-last-child(3), .three-d > *:first-child:nth-last-child(3) ~ * {
  --faces: 3;
}
.three-d > *:nth-child(4) {
  --face: 4;
}
.three-d > *:first-child:nth-last-child(4), .three-d > *:first-child:nth-last-child(4) ~ * {
  --faces: 4;
}
.three-d > *:nth-child(5) {
  --face: 5;
}
.three-d > *:first-child:nth-last-child(5), .three-d > *:first-child:nth-last-child(5) ~ * {
  --faces: 5;
  --cylinder-top: polygon(50% 0%, 93.3% 75%, 6.7% 75%);
  --cylinder-bottom: polygon(50% 100%, 93.3% 25%, 6.7% 25%);
}
.three-d > *:nth-child(6) {
  --face: 6;
}
.three-d > *:first-child:nth-last-child(6), .three-d > *:first-child:nth-last-child(6) ~ * {
  --faces: 6;
  --cylinder-top: polygon(85.36% 14.64%, 85.36% 85.36%, 14.64% 85.36%, 14.64% 14.64%);
}
.three-d > *:nth-child(7) {
  --face: 7;
}
.three-d > *:first-child:nth-last-child(7), .three-d > *:first-child:nth-last-child(7) ~ * {
  --faces: 7;
  --cylinder-top: polygon(50% 0%, 97.55% 34.55%, 79.39% 90.45%, 20.61% 90.45%, 2.45% 34.55%);
  --cylinder-bottom: polygon(50% 100%, 97.55% 65.45%, 79.39% 9.55%, 20.61% 9.55%, 2.45% 65.45%);
}
.three-d > *:nth-child(8) {
  --face: 8;
}
.three-d > *:first-child:nth-last-child(8), .three-d > *:first-child:nth-last-child(8) ~ * {
  --faces: 8;
  --cylinder-top: polygon(75% 6.7%, 100% 50%, 75% 93.3%, 25% 93.3%, 0% 50%, 25% 6.7%);
}
.three-d > *:nth-child(9) {
  --face: 9;
}
.three-d > *:first-child:nth-last-child(9), .three-d > *:first-child:nth-last-child(9) ~ * {
  --faces: 9;
  --cylinder-top: polygon(50% 0%, 89.09% 18.83%, 98.75% 61.13%, 71.69% 95.05%, 28.31% 95.05%, 1.25% 61.13%, 10.91% 18.83%);
  --cylinder-bottom: polygon(50% 100%, 89.09% 81.17%, 98.75% 38.87%, 71.69% 4.95%, 28.31% 4.95%, 1.25% 38.87%, 10.91% 81.17%);
}
.three-d > *:nth-child(10) {
  --face: 10;
}
.three-d > *:first-child:nth-last-child(10), .three-d > *:first-child:nth-last-child(10) ~ * {
  --faces: 10;
  --cylinder-top: polygon(69.13% 3.81%, 96.19% 30.87%, 96.19% 69.13%, 69.13% 96.19%, 30.87% 96.19%, 3.81% 69.13%, 3.81% 30.87%, 30.87% 3.81%);
}
.three-d > *:nth-child(11) {
  --face: 11;
}
.three-d > *:first-child:nth-last-child(11), .three-d > *:first-child:nth-last-child(11) ~ * {
  --faces: 11;
  --cylinder-top: polygon(50% 0%, 82.14% 11.7%, 99.24% 41.32%, 93.3% 75%, 67.1% 96.98%, 32.9% 96.98%, 6.7% 75%, 0.76% 41.32%, 17.86% 11.7%);
  --cylinder-bottom: polygon(50% 100%, 82.14% 88.3%, 99.24% 58.68%, 93.3% 25%, 67.1% 3.02%, 32.9% 3.02%, 6.7% 25%, 0.76% 58.68%, 17.86% 88.3%);
}
.three-d > *:nth-child(12) {
  --face: 12;
}
.three-d > *:first-child:nth-last-child(12), .three-d > *:first-child:nth-last-child(12) ~ * {
  --faces: 12;
  --cylinder-top: polygon(65.45% 2.45%, 90.45% 20.61%, 100% 50%, 90.45% 79.39%, 65.45% 97.55%, 34.55% 97.55%, 9.55% 79.39%, 0% 50%, 9.55% 20.61%, 34.55% 2.45%);
}
.three-d > *:nth-child(13) {
  --face: 13;
}
.three-d > *:first-child:nth-last-child(13), .three-d > *:first-child:nth-last-child(13) ~ * {
  --faces: 13;
  --cylinder-top: polygon(50% 0%, 77.03% 7.94%, 95.48% 29.23%, 99.49% 57.12%, 87.79% 82.74%, 64.09% 97.97%, 35.91% 97.97%, 12.21% 82.74%, 0.51% 57.12%, 4.52% 29.23%, 22.97% 7.94%);
  --cylinder-bottom: polygon(50% 100%, 77.03% 92.06%, 95.48% 70.77%, 99.49% 42.88%, 87.79% 17.26%, 64.09% 2.03%, 35.91% 2.03%, 12.21% 17.26%, 0.51% 42.88%, 4.52% 70.77%, 22.97% 92.06%);
}
.three-d > *:nth-child(14) {
  --face: 14;
}
.three-d > *:first-child:nth-last-child(14), .three-d > *:first-child:nth-last-child(14) ~ * {
  --faces: 14;
  --cylinder-top: polygon(62.94% 1.7%, 85.36% 14.64%, 98.3% 37.06%, 98.3% 62.94%, 85.36% 85.36%, 62.94% 98.3%, 37.06% 98.3%, 14.64% 85.36%, 1.7% 62.94%, 1.7% 37.06%, 14.64% 14.64%, 37.06% 1.7%);
}
.three-d > *:nth-child(15) {
  --face: 15;
}
.three-d > *:first-child:nth-last-child(15), .three-d > *:first-child:nth-last-child(15) ~ * {
  --faces: 15;
  --cylinder-top: polygon(50% 0%, 73.24% 5.73%, 91.15% 21.6%, 99.64% 43.97%, 96.75% 67.73%, 83.16% 87.43%, 61.97% 98.55%, 38.03% 98.55%, 16.84% 87.43%, 3.25% 67.73%, 0.36% 43.97%, 8.85% 21.6%, 26.76% 5.73%);
  --cylinder-bottom: polygon(50% 100%, 73.24% 94.27%, 91.15% 78.4%, 99.64% 56.03%, 96.75% 32.27%, 83.16% 12.57%, 61.97% 1.45%, 38.03% 1.45%, 16.84% 12.57%, 3.25% 32.27%, 0.36% 56.03%, 8.85% 78.4%, 26.76% 94.27%);
}
.three-d > *:nth-child(16) {
  --face: 16;
}
.three-d > *:first-child:nth-last-child(16), .three-d > *:first-child:nth-last-child(16) ~ * {
  --faces: 16;
  --cylinder-top: polygon(61.13% 1.25%, 81.17% 10.91%, 95.05% 28.31%, 100% 50%, 95.05% 71.69%, 81.17% 89.09%, 61.13% 98.75%, 38.87% 98.75%, 18.83% 89.09%, 4.95% 71.69%, 0% 50%, 4.95% 28.31%, 18.83% 10.91%, 38.87% 1.25%);
}
.three-d > *:nth-child(17) {
  --face: 17;
}
.three-d > *:first-child:nth-last-child(17), .three-d > *:first-child:nth-last-child(17) ~ * {
  --faces: 17;
  --cylinder-top: polygon(50% 0%, 70.34% 4.32%, 87.16% 16.54%, 97.55% 34.55%, 99.73% 55.23%, 93.3% 75%, 79.39% 90.45%, 60.4% 98.91%, 39.6% 98.91%, 20.61% 90.45%, 6.7% 75%, 0.27% 55.23%, 2.45% 34.55%, 12.84% 16.54%, 29.66% 4.32%);
  --cylinder-bottom: polygon(50% 100%, 70.34% 95.68%, 87.16% 83.46%, 97.55% 65.45%, 99.73% 44.77%, 93.3% 25%, 79.39% 9.55%, 60.4% 1.09%, 39.6% 1.09%, 20.61% 9.55%, 6.7% 25%, 0.27% 44.77%, 2.45% 65.45%, 12.84% 83.46%, 29.66% 95.68%);
}
.three-d > *:nth-child(18) {
  --face: 18;
}
.three-d > *:first-child:nth-last-child(18), .three-d > *:first-child:nth-last-child(18) ~ * {
  --faces: 18;
  --cylinder-top: polygon(59.75% 0.96%, 77.78% 8.43%, 91.57% 22.22%, 99.04% 40.25%, 99.04% 59.75%, 91.57% 77.78%, 77.78% 91.57%, 59.75% 99.04%, 40.25% 99.04%, 22.22% 91.57%, 8.43% 77.78%, 0.96% 59.75%, 0.96% 40.25%, 8.43% 22.22%, 22.22% 8.43%, 40.25% 0.96%);
}

figure.three-d {
  /*
    Chrome sets some margin properties on figure elements that we
    don't want.
  */
  margin-block-start: initial;
  margin-block-end: initial;
  margin-inline-start: initial;
  margin-inline-end: initial;
}

@keyframes rotating {
  from {
    transform: rotate3d(var(--rx, 1), var(--ry, 1), var(--rz, 1), var(--from, 0deg));
  }
  to {
    transform: rotate3d(var(--rx, 1), var(--ry, 1), var(--rz, 1), var(--to, 360deg));
  }
}
:root {
  --reflection: url("data:image/svg+xml;charset=utf-8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxzdmcgd2lkdGg9IjIxMG1tIiBoZWlnaHQ9IjI5N21tIiB2ZXJzaW9uPSIxLjEiIHZpZXdCb3g9IjAgMCAyMTAgMjk3IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4NCjxkZWZzPg0KPGxpbmVhckdyYWRpZW50IGlkPSJhIiB4MT0iMTA3LjY3IiB4Mj0iMTA3LjQ1IiB5MT0iMzkzLjc0IiB5Mj0iMTQ0LjM4IiBncmFkaWVudFRyYW5zZm9ybT0ibWF0cml4KDEuMzYxMiAwIDAgMSAtMzkuMjQ1IDApIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSI+DQo8c3RvcCBzdG9wLWNvbG9yPSIjMDYwMDAwIiBvZmZzZXQ9IjAiLz4NCjxzdG9wIHN0b3AtY29sb3I9IiMwNjAwMDAiIHN0b3Atb3BhY2l0eT0iMCIgb2Zmc2V0PSIxIi8+DQo8L2xpbmVhckdyYWRpZW50Pg0KPC9kZWZzPg0KPG1ldGFkYXRhPg0KPHJkZjpSREY+DQo8Y2M6V29yayByZGY6YWJvdXQ9IiI+DQo8ZGM6Zm9ybWF0PmltYWdlL3N2Zyt4bWw8L2RjOmZvcm1hdD4NCjxkYzp0eXBlIHJkZjpyZXNvdXJjZT0iaHR0cDovL3B1cmwub3JnL2RjL2RjbWl0eXBlL1N0aWxsSW1hZ2UiLz4NCjxkYzp0aXRsZS8+DQo8L2NjOldvcms+DQo8L3JkZjpSREY+DQo8L21ldGFkYXRhPg0KPHJlY3QgeD0iLS4zMjUxOSIgeT0iMS4wNDA5IiB3aWR0aD0iMjEwLjM5IiBoZWlnaHQ9IjI5Ni42OSIgZmlsbD0idXJsKCNhKSIgZmlsbC1ydWxlPSJldmVub2RkIiBzdHJva2Utd2lkdGg9Ii4zMDg2OCIvPg0KPC9zdmc+");
}

/*# sourceMappingURL=threedom.css.map */
