/*!
 * Copyright (c) 2020 Darren Scott - All Rights Reserved
 *
 * This program is distributed under GPL Version 3 in the hope that
 * it will be useful, but WITHOUT ANY WARRANTY.
 */

@use "sass:math";

$max_faces: 18;

/// Returns a clip-path for a polygon with $faces number of faces. If $invert
/// is true, the y coordinates are flipped to produce an inverted (upside-down)
/// clip path.

/// These clip paths are bounded by a circle: draw a square representing the
/// plane on which the path is to be drawn, then draw a circle within the square
/// such that the north, east, south and west points of the cicle are touching
/// the edges of the square, then draw a regular polygon in that circle where
/// each angle falls somewhere on the circumference of the cirle: these are
/// those coordinates.

@function get-clip-path($faces, $invert: false) {
  $offset: 0; $angle: 360 / $faces; $clip-path: ();
  @if $faces % 2 == 0 { $offset: $angle / 2; }
  @for $i from 0 through $faces - 1 {
    $y1: (1 - math.cos((($angle * $i) + $offset) * math.$pi / 180)) / 2 * 100%;
    $y2: (1 + math.cos((($angle * $i) + $offset) * math.$pi / 180)) / 2 * 100%;
    $x: (1 + math.sin((($angle * $i) + $offset) * math.$pi / 180)) / 2 * 100%;
    @if $invert {
      $clip-path: $clip-path, (math.round($x * 100) / 100) (math.round($y2 * 100) / 100);
    } @else {
      $clip-path: $clip-path, (math.round($x * 100) / 100) (math.round($y1 * 100) / 100);
    }
  }
  @return polygon($clip-path);
}

@mixin trigonometry {
  /*
    Many thanks to the author of this gist for the trig functions:
    https://gist.github.com/stereokai/7666bfe93929b14c2dced148c79e0e97
  */
  --rad: calc(var(--angle) * #{math.$pi} / 180);
  --pow2: calc(var(--rad) * var(--rad));
  --pow3: calc(var(--pow2) * var(--rad));
  --pow4: calc(var(--pow3) * var(--rad));
  --pow5: calc(var(--pow4) * var(--rad));
  --pow6: calc(var(--pow5) * var(--rad));
  --pow7: calc(var(--pow6) * var(--rad));
  --pow8: calc(var(--pow7) * var(--rad));
  --pow9: calc(var(--pow8) * var(--rad));

  --cos-term1: 1;
  --cos-term2: calc(var(--pow2) / 2);
  --cos-term3: calc(var(--pow4) / 24);
  --cos-term4: calc(var(--pow6) / 720);
  --cos-term5: calc(var(--pow8) / 40320);

  --sin-term1: var(--rad);
  --sin-term2: calc(var(--pow3) / 6);
  --sin-term3: calc(var(--pow5) / 120);
  --sin-term4: calc(var(--pow7) / 5040);
  --sin-term5: calc(var(--pow9) / 362880);

  --cos: calc(var(--cos-term1) - var(--cos-term2) + var(--cos-term3) - var(--cos-term4) + var(--cos-term5));
  --sin: calc(var(--sin-term1) - var(--sin-term2) + var(--sin-term3) - var(--sin-term4) + var(--sin-term5));
  --tan: calc(var(--sin) / var(--cos));
}

// See http://lea.verou.me/2011/01/styling-children-based-on-their-number-with-css3/

@mixin nth-child-of($child, $children) {
  & > *:nth-child(#{$child}):nth-last-child(#{$children + 1 - $child}) {
    @content;
  }
}

@mixin children-of($children) {
  & > *:first-child:nth-last-child(#{$children}),
  & > *:first-child:nth-last-child(#{$children}) ~ * {
    @content;
  }
}


.three-d {
  --x-rotation: var(---rotate-x, 0);
  --y-rotation: var(---rotate-y, 0);
  --z-rotation: var(---rotate-z, 0);
  --x-translation: var(---translate-x, 0);
  --y-translation: var(---translate-y, 0);
  --z-translation: var(---translate-z, 0);

  & > *:not(&) {
    --x-rotation: 0;
    --y-rotation: 0;
    --z-rotation: 0;
    --x-translation: 0;
    --y-translation: 0;
    --z-translation: 0;
  }

  &, & > *:not(&) {
    --angle: 0;
    --x2-rotation: 0;
    --y2-rotation: 0;
    --z2-rotation: 0;
    --x2-translation: 0;
    --y2-translation: 0;
    --z2-translation: 0;
    @include trigonometry;
  }
}

.three-d {
  /*
    All 3D classes get their width and height from the --width and
    --height CSS variables.
  */
  width: var(---width);
  height: var(---height);

  & > *:not(&) {
    /*
      Direct descendants which are not 3D objects inherit the --width
      and --height CSS variable values from their parent
    */
    // TODO Is this actually needed? Test with/without.
    ---width: inherit;
    ---height: inherit;
    ---depth: inherit;
  }

  &, & > * {
    /*
      Both 3D classes and their direct descendants (faces) use flex
      display so that their children are centered both vertically and
      horizontally by default.
    */
    display: flex;
    align-items: center;
    justify-content: center;
  }

  &:not(.space) > * {
    /*
      All faces are absolutely positioned relative to their parent.
    */
    // TODO The width/height inherit needs investigating, review the
    // above code etc to revisit what this actually does.
    position: absolute;
    width: inherit;
    height: inherit;
  }

  &, &:not(.space) > * {
    /*
      Applies the transforms to position the faces to create the shapes.

    */
    transform:
      rotateX(var(--x-rotation))
      rotateY(var(--y-rotation))
      rotateZ(var(--z-rotation))
      translate3d(
        var(--x2-translation), var(--y2-translation), var(--z2-translation)
      )
      rotateX(var(--x2-rotation))
      rotateY(var(--y2-rotation))
      rotateZ(var(--z2-rotation))
      translate3d(
        var(--x-translation), var(--y-translation), var(--z-translation)
        );
  }

  &.space {
    /*
     The space class triggers the 3D perspective.
    */
    perspective: 200vmax;

    & * {
      /*
        All descendants of a space require preserve-3d so that they all
        exist within a single 3D space.
      */
      transform-style: preserve-3d;
    }

    &.inline {
      /*
        An inline space can be displayed as an inline element.
      */
      display: inline-flex;
      vertical-align: middle;
    }

    &.private {
      /*
        A private space has it's content clipped so that objects inside
        of it don't overflow into the space around it.
      */
      overflow: hidden;
    }

    &.reflective {
      /*
        A reflective space has a reflection underneath it. Note that this
        feature currently only supports Webkit browsers.
      */
      -webkit-box-reflect: below 0 var(--reflection);
    }
  }

  // ======
  // SHAPES
  // ======

  &.object {
    /*

      Currently, only 2 faces (a card), 4 faces (a tetrahedron), and 6 faces
      (a cuboid) are supported. Hopefully more will be added soon.
    */

    // =========
    // TWO FACES
    // =========

    @include nth-child-of(2, 2) {
      /*
        This is a 2-faced object, with each face on the same plane facing
        away from each other, like a piece of paper.
      */
      // Here, all that's needed is the 2nd face to be rotated by 180deg
      --y-rotation: 180deg;
    }

    // ==========================
    // FOUR FACES - A TETRAHEDRON
    // ==========================

    @include children-of(4) {
      --angle: 60;
      /* only regular tetrahedrons are supported currently */
      ---height: var(---width) !important;
      ---depth: var(---width) !important;
      --face-height: calc(var(---height) * var(--sin));
      height: var(--face-height);
      clip-path: polygon(50% 0, 0 100%, 100% 100%);
      transform-origin: 0 0;
    }

    @include nth-child-of(1, 4) {
      /* The 1st face */
      --x-rotation: 19.5deg;
    }

    @include nth-child-of(2, 4) {
      /* The 2nd face */
      transform-origin: 50% 0;
      --x2-rotation: 19.5deg;
      --y-rotation: 120deg;
    }

    @include nth-child-of(3, 4) {
      /* The 3rd face */
      transform-origin: 50% 0;
      --x2-rotation: 19.5deg;
      --y-rotation: -120deg;
    }

    @include nth-child-of(4, 4) {
      /* The 4th face */

      // This is technically correct but produces horrible effects rotating
      // clip-path: polygon(0 0, 100% 0, 50% 100%);
      // --z-translation: calc(var(--face-height) * #{math.cos(19.5 * math.$pi / 180)});
      // --x-rotation: -90deg;

      // This isn't pretty and results in the face being upside down, but
      // at least does not produce the nasty effects.
      --z-translation: calc(0px - var(--face-height) * #{math.cos(19.5 * math.$pi / 180)});
      --y-translation: calc(0px - 2 * var(--face-height) * #{math.sin(19.5 * math.$pi / 180)});
      --x-rotation: 90deg;
    }

    // ====================
    // SIX FACES - A CUBOID
    // ====================

    /*
      top, right, bottom, left is the css standard
      so for planes, I recommend front, top, right, back, bottom, left

      BUT, IF I MAKE IT top, front, right, back, left, bottom
      then it's all a little easier (shorter), no?
    */

    @include nth-child-of(1, 6) {
      /* The 1st face */
      --z-translation: calc(var(---depth) / 2);
    }

    @include nth-child-of(2, 6) {
      /* The 2nd face */
      height: var(---depth);
      --z-translation: calc(var(---height) / 2);
      --x-rotation: 90deg;
    }

    @include nth-child-of(3, 6) {
      /* The 3rd face */
      width: var(---depth);
      --z-translation: calc(var(---width) / 2);
      --y-rotation: 90deg;
    }

    @include nth-child-of(4, 6) {
      /* The 4th face */
      --z-translation: calc(var(---depth) / 2);
      --y-rotation: 180deg;
    }

    @include nth-child-of(5, 6) {
      /* The 5th face */
      height: var(---depth);
      --z-translation: calc(var(---height) / 2);
      --x-rotation: 270deg;
    }

    @include nth-child-of(6, 6) {
      /* The 6th face */
      width: var(---depth);
      --z-translation: calc(var(---width) / 2);
      --y-rotation: 270deg;
    }

  }

  &.cylinder {
    /*
      A Cylinder has a top (the 1st) and a bottom (the last) face, plus up
      to 16 side faces.
    */
    & > * {
      /* Sorry, not supporting a non-square depth until CSS has sine/cosine funcs */
      ---depth: var(---width) !important;
      // Alternative to using PI to convert from degrees (maybe)
      // This should result in far fewer CSS calculations and therefore
      // better performance - needs investigating further.
      // --rad: calc(6.28 / (var(--faces) - 2) / 2);
      --angle: calc(360 / (var(--faces) - 2) / 2);
      --face-width: calc(var(--sin) * var(---width));
      --radius: calc((var(--face-width) / 2) / var(--tan));

      // ============
      // THE TOP FACE
      // ============

      &:first-child {
        /*
          This is the top face, which just needs to be clipped according to
          the number of side faces, rotated to 90 degress and moved to the
          top of the cylinder.
        */
        height: var(---depth);
        clip-path: var(--cylinder-top);
        --z-translation: calc(var(---height) / 2);
        --x-rotation: 90deg;
      }

      // ==============
      // THE SIDE FACES
      // ==============

      &:not(:first-child):not(:last-child) {
        /*
          The side faces of the cylinder. Each needs to be rotated to an
          angle dependent on the total number of sides, and set to the
          appropriate width so that the circumference of the cylinder
          is correct to sit within the configured width/depth.
        */
        width: var(--face-width);
        --face-angle: calc(1deg * (var(--angle) * 2));
        --y2-rotation: calc(var(--face-angle) * (var(--face) - 2));
        --z-translation: var(--radius);
      }

      // ===============
      // THE BOTTOM FACE
      // ===============

      &:last-child {
        /*
          The bottom face of the cylinder, which needs to treated similarly
          to the top, except the clip path *may* need to be inverted because
          this face is rotated by 270deg rather than 90deg so it faces outward.
        */
        height: var(---depth);
        clip-path: var(--cylinder-bottom, var(--cylinder-top));
        --z-translation: calc(var(---height) / 2);
        --x-rotation: 270deg;
      }

    }
  }

  // ========
  // CAROUSEL
  // ========

  &.carousel {
    /*
      A Carousel is similar to a cylinder except it has no top or bottom
      face, so it is more like a tube than a cylinder.
    */
    & > * {
      width: var(--face-width);
      --angle: calc(360 / var(--faces) / 2);
      --radius: calc((var(--face-width) / 2) / var(--tan));
      --face-angle: calc(1deg * (var(--angle) * 2));
      --face-width: calc(var(--sin) * var(---width));
      --y2-rotation: calc(var(--face-angle) * (var(--face) - 1));
      --z-translation: var(--radius);
    }
    &.wrapped > * {
      /*
        If a carousel has a wrapped modifier class, it's faces are given
        a background-position such that any background image wraps around
        the carousel.
      */
      background-size: cover;
      background-position-x: calc(var(--face-width) * (1 - var(--face)));
    }
  }

  // =====
  // WHEEL
  // =====

  &.wheel {
    /*
      A wheel is an up-ended carousel, so the faces revolve around the x-axis
      rather than the y-axis.
    */
    & > * {
      height: var(--face-height);
      --angle: calc(360 / var(--faces) / 2);
      --radius: calc((var(--face-height) / 2) / var(--tan));
      --face-angle: calc(1deg * (var(--angle) * 2));
      --face-height: calc(var(--sin) * var(---height));
      --x-rotation: calc(var(--face-angle) * (var(--face) - 1));
      --z-translation: var(--radius);
    }
    &.wrapped > * {
      /*
        If a wheel has a wrapped modifier class, it's faces are given
        a background-position such that any background image wraps around
        the wheel.
      */
      background-size: cover;
      background-position-y: calc(var(--face-height) * (1 - var(--face)));
    }
  }

  // ==========
  // ANIMATIONS
  // ==========

  &.rotating {
    --rx: 1; --ry: 1; --rz: 1; --from: 0deg; --to: 360deg;
    animation: rotating 10s linear infinite;
  }

  &.spinning {
    --rx: 0; --rz: 0; --from: 360deg; --to: 0deg;
    animation: rotating 10s linear infinite;
  }

  &.rolling {
    --ry: 0; --rz: 0; --from: 360deg; --to: 0deg;
    animation: rotating 10s linear infinite;
  }

  &.extra.slowly {
    animation-duration: 60s;
  }

  &.slowly {
    animation-duration: 30s;
  }

  &.quickly {
    animation-duration: 5s;
  }

  &.extra.quickly {
    animation-duration: 2s;
  }

  // ==============
  // HELPER CLASSES
  // ==============

  &.no-backface > * {
    /*
      A shortcut class to hide the back faces.
    */
    backface-visibility: hidden;
  }

  &.shaded.object > * {
    /*
      The shaded class implements some very rudimentory shading. This
      only works for objects which do not move, and currently only 6
      sided shapes are supported (i.e cuboids).
    */
    filter: brightness(var(--brightness, 1));
    &:nth-child(2) {
      --brightness: 1.2; /* top */
    }
    &:nth-child(3) {
      --brightness: 0.9; /* right */
    }
    &:nth-child(4) {
      --brightness: 0.8; /* back */
    }
    &:nth-child(5) {
      --brightness: 1.1; /* left */
    }
    &:nth-child(6) {
      --brightness: 0.8; /* bottom */
    }
  }

  &.seated.object {
    /*
      A seated object is one that is sitting on the ground, so the bottom
      face has a box shadow, which helps create the effect visually.

      This currently works okay for cuboids, but may not work for other
      shapes.
    */
    // TODO Try using a pseudo element instead - maybe even implement
    // a "shadowed" class that causes a shadow to be created at whatever
    // height.
    & > *:last-child {
      box-shadow: -7px -7px 20px 0px #000000b5;
    }
  }

}

// ==============================
// GENERAL PURPOSE FACE VARIABLES
// ==============================

.three-d {
  & > * {
    --face: 0;
    --faces: 0;
  }
  @for $i from 1 through $max_faces {
    & > *:nth-child(#{$i}) {
      --face: #{$i};
    }
    @include children-of($i) {
      --faces: #{$i};
      @if $i > 4 {
        --cylinder-top: #{get-clip-path($i - 2)};
        @if $i % 2 == 1 {
          --cylinder-bottom: #{get-clip-path($i - 2, true)};
        }
      }
    }
  }
}

// =============
// NORMALIZATION
// =============

figure.three-d {
    /*
      Chrome sets some margin properties on figure elements that we
      don't want.
    */
    margin-block-start: initial;
    margin-block-end: initial;
    margin-inline-start: initial;
    margin-inline-end: initial;
}

// ===================
// ANIMATION KEYFRAMES
// ===================

@keyframes rotating {
  from {
    transform: rotate3d(var(--rx, 1), var(--ry, 1), var(--rz, 1), var(--from, 0deg));
  }
  to {
    transform: rotate3d(var(--rx, 1), var(--ry, 1), var(--rz, 1), var(--to, 360deg));
  }
}

// ==============
// ROOT VARIABLES
// ==============

:root {
  --reflection: url('data:image/svg+xml;charset=utf-8;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxzdmcgd2lkdGg9IjIxMG1tIiBoZWlnaHQ9IjI5N21tIiB2ZXJzaW9uPSIxLjEiIHZpZXdCb3g9IjAgMCAyMTAgMjk3IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOmNjPSJodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9ucyMiIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4NCjxkZWZzPg0KPGxpbmVhckdyYWRpZW50IGlkPSJhIiB4MT0iMTA3LjY3IiB4Mj0iMTA3LjQ1IiB5MT0iMzkzLjc0IiB5Mj0iMTQ0LjM4IiBncmFkaWVudFRyYW5zZm9ybT0ibWF0cml4KDEuMzYxMiAwIDAgMSAtMzkuMjQ1IDApIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSI+DQo8c3RvcCBzdG9wLWNvbG9yPSIjMDYwMDAwIiBvZmZzZXQ9IjAiLz4NCjxzdG9wIHN0b3AtY29sb3I9IiMwNjAwMDAiIHN0b3Atb3BhY2l0eT0iMCIgb2Zmc2V0PSIxIi8+DQo8L2xpbmVhckdyYWRpZW50Pg0KPC9kZWZzPg0KPG1ldGFkYXRhPg0KPHJkZjpSREY+DQo8Y2M6V29yayByZGY6YWJvdXQ9IiI+DQo8ZGM6Zm9ybWF0PmltYWdlL3N2Zyt4bWw8L2RjOmZvcm1hdD4NCjxkYzp0eXBlIHJkZjpyZXNvdXJjZT0iaHR0cDovL3B1cmwub3JnL2RjL2RjbWl0eXBlL1N0aWxsSW1hZ2UiLz4NCjxkYzp0aXRsZS8+DQo8L2NjOldvcms+DQo8L3JkZjpSREY+DQo8L21ldGFkYXRhPg0KPHJlY3QgeD0iLS4zMjUxOSIgeT0iMS4wNDA5IiB3aWR0aD0iMjEwLjM5IiBoZWlnaHQ9IjI5Ni42OSIgZmlsbD0idXJsKCNhKSIgZmlsbC1ydWxlPSJldmVub2RkIiBzdHJva2Utd2lkdGg9Ii4zMDg2OCIvPg0KPC9zdmc+');
}
